package by.bsuir.kaziukovich.oop.datalayer.readerwriter.bookinfo.impl;

import by.bsuir.kaziukovich.oop.datalayer.checker.InfoCheckersFactory;
import by.bsuir.kaziukovich.oop.datalayer.checker.bookinfo.BookInfoChecker;
import by.bsuir.kaziukovich.oop.datalayer.info.book.BookInfo;
import by.bsuir.kaziukovich.oop.datalayer.info.book.BookInfoFactory;
import by.bsuir.kaziukovich.oop.datalayer.info.book.BookType;
import by.bsuir.kaziukovich.oop.datalayer.readerwriter.InfoReadWriteException;
import by.bsuir.kaziukovich.oop.datalayer.readerwriter.bookinfo.BookInfoReaderWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Class implementing InfoReaderWriter interface for BookInfo type, reading info from file
 */
public class LibraryBookInfoFileReaderWriter implements BookInfoReaderWriter {
    /**
     * Delimiter of line entries
     */
    private final String delimiter;

    /**
     * Reads lines from specified path
     * @param path Specified path
     * @return Set of BookInfo's generated by read lines
     * @throws InfoReadWriteException In case of file read error
     */
    @Override
    public List<BookInfo> readFrom(String path) throws InfoReadWriteException {
        List<BookInfo> result = new ArrayList<>();
        BookInfoChecker bookInfoChecker = InfoCheckersFactory.getBookInfoChecker();
        List<String> lines;
        String[] splittedLine;

        if (path == null) {
            throw new IllegalArgumentException("Path shouldn't be null");
        }

        try {
            lines = Files.readAllLines(Paths.get(path));
        } catch (IOException ioException) {
            throw new InfoReadWriteException("Error reading file " + path, ioException);
        }

        for (String line : lines) {
            if (bookInfoChecker.isEntryCorrect(line, delimiter)) {
                splittedLine = line.split(delimiter);
                result.add(BookInfoFactory.createNew(splittedLine[1], splittedLine[0], splittedLine[2],
                        BookType.valueOf(splittedLine[3])));
            }
        }
        return result;
    }

    /**
     * Writes strings to specified path generated by specified list
     * @param infoList Set of values to be written
     * @param path Specified path
     * @throws InfoReadWriteException In case of file write error
     */
    @Override
    public void writeTo(List<BookInfo> infoList, String path) throws InfoReadWriteException {
        List<String> bookLines = new ArrayList<>();

        if ((infoList == null) || (path == null)) {
            throw new IllegalArgumentException("Arguments shouldn't be null");
        }

        for (BookInfo bookInfo : infoList) {
            bookLines.add(bookInfo.getAuthor() + delimiter + bookInfo.getTitle() + delimiter + bookInfo.getIsbn()
                    + delimiter + bookInfo.getBookType().toString());
        }

        try {
            Files.write(Paths.get(path), bookLines);
        } catch (IOException ioException) {
            throw new InfoReadWriteException("Error writing to file " + path, ioException);
        }
    }

    /**
     * Checks if current object equals to given
     * @param o Object to check equality to
     * @return True if objects are equal, otherwise false
     */
    @Override
    public boolean equals(Object o) {
        LibraryBookInfoFileReaderWriter libraryBookInfoFileReaderWriter;

        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        libraryBookInfoFileReaderWriter = (LibraryBookInfoFileReaderWriter) o;
        return Objects.equals(delimiter, libraryBookInfoFileReaderWriter.delimiter);
    }

    /**
     * Generates hash of current object
     * @return Hash of current object
     */
    @Override
    public int hashCode() {
        return Objects.hash(delimiter);
    }

    /**
     * Generates string representation of object
     * @return String representation of object
     */
    @Override
    public String toString() {
        return getClass().getName() + "@delimiter: " + delimiter;
    }

    /**
     * Constructor for ReaderWriter instance
     */
    public LibraryBookInfoFileReaderWriter() {
        delimiter = ":";
    }
}
